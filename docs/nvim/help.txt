" vim: filetype=help foldmethod=marker foldmarker=<<<,>>> modifiable noreadonly
*help.txt* Neovim help


       .__                 .__                          .__        ___.    ~
  ____ |__|__  ___         |  |__   ____   _____   ____ |  | _____ \_ |__  ~
 /    \|  \  \/  /  ______ |  |  \ /  _ \ /     \_/ __ \|  | \__  \ | __ \ ~
|   |  \  |>    <  /_____/ |   Y  (  <_> )  Y Y  \  ___/|  |__/ __ \| \_\ \~
|___|  /__/__/\_ \         |___|  /\____/|__|_|  /\___  >____(____  /___  /~
     \/         \/              \/             \/     \/          \/    \/ ~

                     Some helps for neovim on nix-homelab
                                      by
                                 Bruno Adelé

==============================================================================
CONTENTS                                                              *MyHLHelp*

    1. Neovim plugins .......   |MyHLPlugins|
    2. Keys leader ..........   |MyHLKeysLeader|
    3. Keys mapping .........   |MyHLKeysMapping|
    4. Telescope ............   |MyHLTelescope|
    5. Quickfixlist .........   |MyHLQuickfixlist|
    6. Coding ...............   |MyHLCoding|
    7. Debug ................   |MyHLDebug|

NOTE: this help with refresh with `<leader>hr`

==============================================================================

                               == *MyHLPlugins* ==

                     alpha    Neovim splash screen
                   comment    Comments
                   lualine    Status for neovi
                  gitsigns    Git integration for buffers
                  neo-tree    Manage the file system
                 telescope    Find, Filter, Preview, Pick. All lua, all the time.
                 tokyonigh    Colorscheme
                 which-key    Displays a popup with possible keybindings
                bufferline    Buffer line with tab integration
           mardown-preview    Markdown preview
          indent_blankline    Indent guides for Neovim

                                     ---


                             == *MyHLKeysLeader* ==

              <leader>c       Code
              <leader>f       Files
              <leader>h       Help
              <leader>s       Search
              <leader>t       Text
                                     ---


                             == *MyKeysMapping* ==

                    Cheatsheet from https://vim.rtorr.com/

== Help ==
F1         - show this help
Shift + F1 - refresh help tokens
K          - Open VIM manual word under cusor


== Custom key ==
Ctrl + d - Toggle folder view

== Visual Mode ==

v,V             - start visual mode/ start visual line mode
Ctrl + v        - start visual block mode
o,O             - move to other begin or end of marked area
a<block>        - around block with "({[<>]})"
i<block>        - inside block with "({[<>]})"
aw              - around mark a word
ip              - inside paragraph
Esc or Ctrl + c - exit visual Mode


== Comment ==
gc              - comment current line (visual mode)
gb              - comment current block (visual mode

== Movement ==
h,j,k,l         - move cursor left,down,up,right
H,M,L           - move to top of screen (top, middle, bottom)
w,W             - jump forwards to the start of a word or (words can contain
                punctuation)
e,E             - jump forwards to the end of a word (words can contain
                punctuation)
b,B             - jump backwards to the start of a word (words can contain
                punctuation)
ge,gE           - jump backwards to the end of a word (words can contain
                punctuation)
%               - move to matching character (default supported pairs: '()',
                '{}', '[]' - use :h matchpairs in vim for more info)
0               - jump to the start of the line
^               - jump to the first non-blank character of the line
$               - jump to the end of the line
g_              - jump to the last non-blank character of the line
gg              - go to the first line of the document
G               - go to the last line of the document
5gg or 5G       - go to line 5
gd              - move to local declaration
gD              - move to global declaration
fx              - jump to next occurrence of character x
tx              - jump to before next occurrence of character x
Fx              - jump to the previous occurrence of character x
Tx              - jump to after previous occurrence of character x
;               - repeat previous f, t, F or T movement
,               - repeat previous f, t, F or T movement, backwards
}               - jump to next paragraph (or function/block, when editing code)
{               - jump to previous paragraph (or function/block, when editing
                code)
zz,zt,z         - center cursor on screen, top, bottom²
Ctrl + e        - move screen down one line (without moving cursor)
Ctrl + y        - move screen up one line (without moving cursor)
Ctrl + b        - [DISABLE] move back one full screen
Ctrl + f        - [DISABLE] move forward one full screen
Ctrl + d        - [DISABLE] move forward 1/2 a screen
Ctrl + u        - move back 1/2 a screen

== Insert mode ==

i,I             - insert before the cursor, insert at the beginning of the line
a,A             - insert (append) after the cursor, at the end of the line
o,O             - append (open) a new line below/above the current line
ea              - insert (append) at the end of the word
Ctrl + h        - delete the character before the cursor during insert mode
Ctrl + w        - delete word before the cursor during insert mode
Ctrl + j        - begin new line during insert mode
Ctrl + t        - indent (move right) line one shiftwidth during insert mode
Ctrl + d        - [DISABLE] de-indent (move left) line one shiftwidth during insert mode
Ctrl + n        - insert (auto-complete) next match before the cursor during
                insert mode
Ctrl + p        - insert (auto-complete) previous match before the cursor
                during insert mode
Ctrl + rx       - insert the contents of register x
Ctrl + ox       - Temporarily enter normal mode to issue one normal-mode command x.
Esc or Ctrl + c - exit insert mode

== Edit mode ==

r,R             - replace a single character, replace more than one character,
                until ESC is pressed.
J               - join line below to the current one with one space in between
gJ              - join line below to the current one without space in between
gwip            - reflow paragraph
g~              - switch case up to motion
gu              - change to lowercase up to motion
gU              - change to uppercase up to motion
cc              - change (rplace) entire line
c$ or C         - change (replace) to the end of the line
ciw             - change (replace) entire word
cw or ce        - change (replace) to the end of the word
s,S             - delete character and substitute text,delete line and
                substitute text (same as cc)
xp              - transpose two letters (delete and paste)
u               - undo
U               - restore (undo) last changed line
Ctrl + r        - redo
.               - repeat last command

== Visual Commands

>               - shift text right
<               - shift text left
y               - yank (copy) marked text
d               - delete marked text
~               - switch case
u               - change marked text to lowercase
U               - change marked text to uppercase

== Register ==

:reg[isters]    - show registers content
"xy             - yank into register x
"xp             - paste contents of register x
"+y             - yank into the system clipboard register
"+p             - paste from the system clipboard register

Tip Special registers:
 0              - last yank
 "              - unnamed register, last delete or yank
 %              - current file name
 #              - alternate file name
 *              - clipboard contents (X11 primary)
 +              - clipboard contents (X11 clipboard)
 /              - last search pattern
 :              - last command-line
 .              - last inserted text
                - - last small (less than a line) delete
 =              - expression register
 _              - black hole register

== Mark and position ==

Marks and positions
:marks - list of marks
ma - set current position for mark A
`a - jump to position of mark A
y`a - yank text to position of mark A
`0 - go to the position where Vim was previously exited
`" - go to the position when last editing this file
`. - go to the position of the last change in this file
`` - go to the position before the last jump
:ju[mps] - list of jumps
Ctrl + i - go to newer position in jump list
Ctrl + o - go to older position in jump list
:changes - list of changes
g, - go to newer position in change list
g; - go to older position in change list
Ctrl + ] - jump to the tag under cursor

Tip To jump to a mark you can either use a backtick (`) or an apostrophe (').
Using an apostrophe jumps to the beginning (first non-blank) of the line
holding the mark.

== Undo/Redo ==

 U      Undo
 C-d    Redo



                            == *MyHLTelescope* ==

== Live grep
Ctrl + k  - Surround quote
-t <ext>         - filter with extension (ripgrep option)
-g "<folder>/*"  - Filter on specific folder
                            == *MyHLQuifixlist* ==

Alt + Q   - Send seledted to quick fix list
Ctrl + Q  - Send all result to quick fix list

================
== *MyHLCoding* ==
================

... *Indent/FormatCode* ...
gg=G                   - Indent/format code
:NeoFormat             - Indent/format code
:EasyAlign /<marker>/  - Align text with marker

*LSP*
:LspInfo               - Get lsp information for current language

== *Search-And-Replace* ==
[/]    Search pattern, /pattern\c insensitive, /pattern\C sensitive
[n,N]  Next, Previous
[*,g*] Search word under cursor, search partial word

:/<search>
:s/<search>/<replace>/g (On single line)
:%s/<search>/<replace>/g (all lines)
:%s/<search>/<replace>/gc (all lines + confirmation)


                               == *MyHLDebug* ==

:h provider                          - Check vim external provider
:checkhealth or :checkhealth <name>  - Check vim installation
:LspInfo                             - Show the LSP confirmation
:LspLog                              - Show LSP log
:h key-notation                      - Show key notations
