{
  config,
  lib,
  pkgs,
  ...
}:
let
  domain = "${config.networking.fqdn}";
  appDomain = "lampiotes.${domain}";
  listenPort = 10009;
in

{
  ############################################################################
  # Clan Credentials
  ############################################################################
  # Before insert the token, you need to create the user and the org in influxdb
  # grafana with ([buckets, orgs, takss] permission
  clan.core.vars.generators.prompts-grafana = {
    prompts."influxdb-token" = {
      description = "Please insert the grafana influxdb token";
      type = "hidden";
      persist = true;
    };
  };

  clan.core.vars.generators.grafana = {
    files.admin_password = {
      owner = "grafana";
      group = "grafana";
      mode = "0400";
    };
    files.secret_key = {
      owner = "grafana";
      group = "grafana";
      mode = "0400";
    };

    files.influxdb_token_key = {
      owner = "grafana";
      group = "grafana";
      mode = "0400";
    };

    dependencies = [
      "prompts-grafana"
    ];

    runtimeInputs = [
      pkgs.pwgen
    ];
    script = ''
      ADMINPASSWORD="$(pwgen -s 48 1)"
      SECRETKEY="$(pwgen -s 48 1)"

      echo "$ADMINPASSWORD" > "$out/admin_password"
      echo "$SECRETKEY" > "$out/secret_key"

      cat $in/prompts-grafana/influxdb-token > $out/influxdb_token_key
    '';
  };

  ############################################################################
  # Services
  ############################################################################
  # WARNING: the provisionner is commented out, because I don't know why it doesn't work
  # Token generated by clan
  # But I don't know why the token is then stored in influxdb2 in some sort of base64,
  # so you need to modify the key in the clan store (vars)
  #
  # influx auth list --host http://localhost:8086 --org homelab --token $(clan vars get houston influxdb/influxdb_token_key) | grep grafana | cut -f 3
  # clan vars set houston grafana/influxdb_token_key <PREVIOUS_RESULT_COMMAND>
  # clan vars set houston grafana/env (note: type INFLUX_TOKEN=<PREVIOUS RESULT COMMAND>)
  # services.influxdb2 = {
  #   provision = {
  #     organizations."homelab" = {
  #       auths = {
  #         "grafana" = {
  #           readPermissions = [
  #             "buckets"
  #             "orgs"
  #             "tasks"
  #           ];
  #
  #           tokenFile = config.clan.core.vars.generators."grafana".files."influxdb_token_key".path;
  #         };
  #       };
  #     };
  #   };
  # };

  services.prometheus.enable = true;
  hardware.mcelog.enable = true;
  services.sysstat.enable = true;

  services.postgresql = {
    ensureUsers = [
      {
        name = "grafana";
        ensureDBOwnership = true;
      }
    ];
    ensureDatabases = [
      "grafana"
    ];
  };

  services.grafana = {
    enable = true;

    settings = {
      server = {
        http_port = listenPort;
        http_addr = "127.0.0.1";
        domain = appDomain;
      };
      "auth.anonymous".enable = true;

      database = lib.mkDefault {
        type = "postgres";
        host = "/run/postgresql";
        name = "grafana";
        user = "grafana";
        ssl_mode = "disable";
      };

      analytics = {
        reporting_enabled = false;
        check_for_updates = false;
      };
      security = {
        cookie_secure = true;
        admin_password = "$__file{${
          config.clan.core.vars.generators."grafana".files."admin_password".path
        }}";
        secret_key = "$__file{${config.clan.core.vars.generators."grafana".files."secret_key".path}}";
      };
      users = {
        allow_signup = false;
      };
      "auth.anonymous".enabled = false;

      # plugins = {
      #   allow_loading_unsigned_plugins = "marcusolsson-treemap-panel";
      # };

      # provision.datasources.settings.datasources = [
      #   {
      #     name = "influxdb";
      #     type = "influxdb";
      #     url = "http://127.0.0.1:8086";
      #   }
      # ];
    };
  };

  # systemd.services.grafana-install-plugins = {
  #   description = "Install Grafana plugins";
  #   after = [ "grafana.service" ];
  #   wants = [ "grafana.service" ];
  #   wantedBy = [ "multi-user.target" ];
  #
  #   serviceConfig = {
  #     Type = "oneshot";
  #     User = "grafana";
  #     RemainAfterExit = true;
  #   };
  #
  #   script = ''
  #     if [ ! -d /var/lib/grafana/plugins/marcusolsson-treemap-panel ]; then
  #       ${pkgs.grafana}/bin/grafana cli plugins install marcusolsson-treemap-panel
  #     fi
  #   '';
  # };

  ############################################################################
  # Reverse Proxy
  ############################################################################
  services.nginx.virtualHosts."${appDomain}" = {
    forceSSL = true;
    enableACME = true;
    locations."/" = {
      proxyPass = "http://127.0.0.1:${toString listenPort}";
      recommendedProxySettings = true;
      proxyWebsockets = true;
    };
    extraConfig = ''access_log /var/log/nginx/public.log vcombined;'';
  };

  networking.firewall.allowedTCPPorts = [
    443
  ];

  #############################################################################
  # Backup
  #############################################################################
  clan.postgresql.databases = {
    grafana = {
      service = "grafana";
      restore = {
        stopOnRestore = [ "grafana" ];
      };
    };
  };

}
