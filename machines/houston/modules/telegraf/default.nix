{
  config,
  lib,
  pkgs,
  ...
}:
{
  ############################################################################
  # Clan Credentials
  ############################################################################
  # Before insert the token, you need to create the user and the org in influxdb
  # telegraf with write on telegraf bucket
  clan.core.vars.generators.prompts-telegraf = {
    prompts."influxdb-token" = {
      description = "Please insert the telegraf influxdb token";
      type = "hidden";
      persist = true;
    };
  };

  clan.core.vars.generators.telegraf = {
    files.influxdb_token_key = {
      owner = "telegraf";
      group = "telegraf";
      mode = "0400";
    };
    files.envfile = {
      owner = "telegraf";
      group = "telegraf";
      mode = "0400";
    };

    dependencies = [
      "prompts-telegraf"
    ];

    runtimeInputs = [
      pkgs.pwgen
    ];
    script = ''
      cat $in/prompts-telegraf/influxdb-token > $out/influxdb_token_key

      INFLUXDB_TOKEN=$(cat $in/prompts-telegraf/influxdb-token)
      echo "INFLUX_TOKEN=$INFLUXDB_TOKEN" > "$out/envfile"
    '';
  };

  ############################################################################
  # Services
  ############################################################################
  # Token generated by clan
  # But I don't know why the token is then stored in influxdb2 in some sort of base64,
  # so you need to modify the key in the clan store (vars)
  #
  # influx auth list --host http://localhost:8086 --org homelab --token $(clan vars get houston influxdb/influxdb_token_key) | grep telegraf | cut -f 3
  # clan vars set houston telegraf/influxdb_token_key <PREVIOUS_RESULT_COMMAND>
  # clan vars set houston telegraf/env (note: type INFLUX_TOKEN=<PREVIOUS RESULT COMMAND>)
  # services.influxdb2 = {
  #
  #   provision = {
  #     organizations."homelab" = {
  #       buckets = {
  #         "telegraf" = {
  #           retention = 0;
  #         };
  #       };
  #
  #       # auths = {
  #       #   "telegraf" = {
  #       #     readBuckets = [
  #       #       "telegraf"
  #       #     ];
  #       #     writeBuckets = [ "telegraf" ];
  #       #
  #       #     tokenFile = config.clan.core.vars.generators."telegraf".files."influxdb_token_key".path;
  #       #   };
  #       # };
  #     };
  #   };
  # };

  systemd.services.telegraf = {
    serviceConfig = {
      EnvironmentFile = config.clan.core.vars.generators."telegraf".files."envfile".path;
    };

    path = [
      pkgs.reaction
      pkgs.jq
    ];
  };

  security.sudo.execWheelOnly = lib.mkForce false;
  security.sudo.extraRules = [
    {
      users = [ "telegraf" ];
      commands = [
        {
          command = "/etc/telegraf/scripts/reaction-metrics.sh";
          options = [
            "NOPASSWD"
          ];
        }
      ];

      runAs = "reaction";
    }
  ];

  # metric types
  # Suffixes qui d√©terminent le type
  # _value
  # _total
  # _sum
  # _count
  # _bucket
  services.telegraf = {
    enable = true;
    extraConfig = {
      inputs = {
        exec = lib.mkForce {
          commands = [
            "/run/wrappers/bin/sudo -u reaction /etc/telegraf/scripts/reaction-metrics.sh"
          ];

          data_format = "influx";

          interval = "15s";

          # Timeout de la commande
          timeout = "10s";

          tags = {
            host = config.networking.hostName;
            service = "reaction";
          };
        };

        dns_query = {
          servers = [ "8.8.8.8" ];
        };

        nginx = {
          urls = [ "http://localhost/nginx_status" ];
        };
        ping = {
          urls = [ "8.8.8.8" ];
        };
      };
      outputs = {
        # influxdb_v2 = {
        #   urls = [ "http://${influxdb_address}" ];
        #   token = "$INFLUX_TOKEN";
        #   bucket = "telegraf";
        #
        #   inherit (config.services.influxdb2.provision.initialSetup) organization;
        # };
        prometheus_client = {
          listen = ":9273";
        };
      };
    };
  };

  # reaction metrics script
  environment.etc."telegraf/scripts/reaction-metrics.sh" = {
    source = pkgs.replaceVars ./scripts/reaction-metrics.sh {
      iptables = "${config.networking.firewall.package}/bin/iptables";
      ip6tables = "${config.networking.firewall.package}/bin/ip6tables";
      sudo = "/run/wrappers/bin/sudo";
      jq = "${pkgs.jq}/bin/jq";
      reaction = "${pkgs.reaction}/bin/reaction";
    };
    mode = "0755";
  };

}
